import Head from "next/head";
import React, { useState } from "react";
import Header from "../../../components/molecules/Header";
import Nav from "../../../components/molecules/Nav";
import styles from "../../../styles/Home.module.css";
import Table from "../../../components/molecules/Table";
import Button from "../../../components/atoms/Buttons";
import SearchIcon from "../../../images/icons/SearchIcon";
import AddIcon from "../../../images/icons/AddIcon";
import { adminData } from "../../../config/OverviewTable";
import ProfilePicture from "../../../images/icons/ProfilePicture";
import TableMenuIcon from "../../../images/icons/TableMenuIcon";
import MenuButton from "../../../components/atoms/TableMenuButton";
import TableMenuButton from "../../../components/atoms/TableMenuButton";
import routeConfig from "../../../config/routeConfig";
import Cok from "cookie";
import axiosHttp from "../../../utility/httpCalls";
import { useRouter } from "next/router";
import { RoundedInputWithIcon } from "../../../components/atoms/Input";

function Index({ users }) {
  const [searchFilter, setSearchFilter] = useState("none");
  const router = useRouter();
  let editUser = () => {
    router.push("admin_page/nuovouser");
  };

  const setColor = (param1, param2) =>{
    if (param1 === param2){
      return "primary"
    }

    return "secodary"
}

  return (
    <div className={styles.container}>
      <Head>
        <title>MCP- Application</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Header>
          <p>Dashboard</p>
        </Header>
        <div className="dashboard_container">
          <Nav />
          <div className={styles.overview_body_container}>
            <h4>User Management</h4>
            <br />
            <br />
            <Table
              headKeys={[
                "Name",
                "Roulo",
                "Data Creata",
                "Status",
                () => <AddIcon />,
              ]}
              tableData={users}
              displayHead={true}
              selfDisplayComponent={true}
              displayComponent={users.filter((item) => {
                if (searchFilter == "none"|| searchFilter == "") {
                  return item;
                }else if ( 
                  item.first_name.toLowerCase() == searchFilter.toLowerCase() ||
                  item.first_name.toLowerCase().startsWith(searchFilter.toLowerCase())
                  ) {
                  return item;
                }
              }).map(
                ({ first_name, role, created_at, status, id }, i) => (
                  <tr key={i}>
                    <td>
                      <ProfilePicture
                        style={{
                          marginRight: "6px",
                        }}
                      />
                      {first_name}
                    </td>
                    <td>{role == 2 ? "CREATOR" : "ADMIN"}</td>
                    <td>{created_at}</td>
                    <Button
                      size={"auto"}
                      fontSize="0.8em"
                      color={status === "active" ? "Received" : "Cancelled"}
                      margin="16px 0"
                    >
                      {status}
                    </Button>
                    <td>
                      <TableMenuButton
                        button1={{text: "ATTIVO", url: `${routeConfig.updateUserStatus}/${id}/status`, method: "patch", value: {status: "active"}, color: setColor(status, "active")}}
                        button2={{text: "SOSPESO", url: `${routeConfig.updateUserStatus}/${id}/status`, method: "patch", value: {status: "inactive"}, color: setColor(status, "inactive")}}
                        viewcontent={null}
                        modifica={{ url: `/admin/admin_page/modifieduser/${id}`, text: "Modifica User"}}
                        sospende={null}
                        attiva={null}
                        delete={{ url: `${routeConfig.deleteUser}/${id}`, data: "", method: "DELETE", text: "Cancella User"}}
                      />
                    </td>
                  </tr>
                )
              )}
            >
              <RoundedInputWithIcon
                suffix={SearchIcon}
                placeholder="RICERCA USER"
                onChange={(e)=>{setSearchFilter(e.target.value)}}
              />

              <Button
                color="secondary"
                size={"auto"}
                onClick={(e) => {
                  editUser();
                }}
              >
                <AddIcon />
                <p
                  style={{
                    margin: "0px",
                    marginLeft: "10px",
                  }}
                  className="small_text"
                >
                  NUOVO USER
                </p>
              </Button>
            </Table>
          </div>
        </div>
      </main>
    </div>
  );
}

export default Index;

export async function getServerSideProps({ req, res }) {
  try {
    let cook = Cok.parse(req.headers.cookie) || "";
    let token = cook.token;
    const usersUrl = routeConfig.getAdminUsers;
    let users = await axiosHttp(usersUrl, null, "GET", token);
    console.log({ users });
    return { props: { users } };
  } catch (error) {
    return { props: { users: adminData } };
  }
}
